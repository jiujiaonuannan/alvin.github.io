<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo 操作指南</title>
    <url>/2020/04/13/hexo%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>面试圣金</title>
    <url>/2020/05/13/%E9%9D%A2%E8%AF%95%E5%9C%A3%E9%87%91/</url>
    <content><![CDATA[<h3 id="1、CSS-中解决浮动中高度塌陷的方案有哪些？"><a href="#1、CSS-中解决浮动中高度塌陷的方案有哪些？" class="headerlink" title="1、CSS 中解决浮动中高度塌陷的方案有哪些？"></a>1、CSS 中解决浮动中高度塌陷的方案有哪些？</h3><p>可以先概括解决高度塌陷问题的两种类型：clear 属性 和 BFC 法<br>BFC定义: 具有 BFC 特性的元素可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 BFC 具有普通容器所没有的一些特性。<br>然后可以介绍两种类型的具体方案：<br>  1、追加元素并设置 clear 属性<br>  2、使用 CSS 样式插入伪元素</p>
  <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.parent::after &#123;</span><br><span class="line">  content: <span class="string">''</span>,</span><br><span class="line">  height: 0;</span><br><span class="line">  clear: both;</span><br><span class="line">  display: block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可能追加的面试题:<br>  1、高度塌陷产生的原因是什么？<br>  2、clear 属性清除浮动的原理是什么？<br>  3、采用 BFC 解决高度塌陷和clear 属性清除浮动相比的优势是什么？</p>
]]></content>
  </entry>
  <entry>
    <title>flutter 开发手册</title>
    <url>/2020/04/16/flutter-%E5%BC%80%E5%8F%91%E6%89%8B%E5%86%8C/</url>
    <content><![CDATA[<p>fluter 环境搭建 文档: <a href="http://www.imooc.com/article/284328" target="_blank" rel="noopener">http://www.imooc.com/article/284328</a></p>
<p>启动项目<br>1、open -a Simulator // 启动模拟器<br>2、flutter run</p>
]]></content>
  </entry>
  <entry>
    <title>Linux technology and practice</title>
    <url>/2020/04/13/Linux-technology-and-practice/</url>
    <content><![CDATA[<p>Linux 常用指令大全</p>
<p>Vim的标准和高级操作<br>交互模式下<br>1、0: 移动到行首; $ 移动到行尾<br>2、w: 一个单词一个单词地移动<br>3、:q! 强制退出; :wq/:x 保存并退出<br>4、x: 删除字符 (数字+x 可删除多个字符)<br>d: 删除单词; dd: 删除行de; dw 删除单词<br>d0: 删除到行首; d$: 删除到行末<br>5、yy: 复制行到内存中; yw: 复制单词<br>6、p: 粘贴 (数字+p 可粘贴多次)<br>7、r: 替换; R 进入替换模式(Esc可退出)<br>8、u: 撤销修改; ctrl + r 取消撤销的内容<br>9、g: 跳到指定行 (7G/7gg)<br>10、/: 查找 (n下一个, N上一个)<br>11、:s/旧字符/新字符[/g]: 查找替换<br>12、/r 合并文件<br>13: :sp 分割屏幕; :vsp 垂直分屏<br>移动下一个视口 ctrl + w<br>14、v、V、ctrl+v 进入可视模式</p>
]]></content>
  </entry>
  <entry>
    <title>git 常用操作备忘录</title>
    <url>/2020/04/15/git-%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C%E5%A4%87%E5%BF%98%E5%BD%95/</url>
    <content><![CDATA[<p>场景一: fork其他人项目更新代码<br>git remote -v<br>git remote add upstream <a href="mailto:git@github.com">git@github.com</a>:xxx/xxx.git  // 添加远程仓库<br>git remote remove upstream // 删除远程仓库<br>git fetch upstream  // 从源仓库更新同步代码<br>git merge upstream/master  // 合并到本地代码<br>git push </p>
<p>场景二: 线上master分支回滚代码<br>方法一: 未设置保护分支<br>1、git reset –hard commitid<br>2、git push -f</p>
<p>方法二: 设置了保护分支<br>1、git revert –no-commit commitid (一般用于回滚当前的commitid)<br>补充: git revert HEAD~3^..HEAD (一般用于回滚多个commitid)<br>2、git push</p>
]]></content>
  </entry>
  <entry>
    <title>Google V8</title>
    <url>/2020/06/04/Google-V8/</url>
    <content><![CDATA[<img src="https://static001.geekbang.org/resource/image/e8/24/e87f9381b7ce9ed2f4caca62860d3924.jpg" />

<h1 id="什么是V8"><a href="#什么是V8" class="headerlink" title="什么是V8?"></a>什么是V8?</h1><p><font size=4>V8 是 JavaScript 虚拟机的一种。我们可以简单地把 JavaScript 虚拟机理解成是一个翻译程序，将人类能够理解的<strong>编程语言 JavaScript</strong>，翻译成机器能够理解的<strong>机器语言</strong>。如下图所示</font></p>
<p><img src="https://static001.geekbang.org/resource/image/8a/a1/8a40fd003baa9be179fe2e55a1be5fa1.jpg" alt="avatar"><br><font size=4>那么 V8 又是怎么执行 JavaScript 代码的呢？</font></p>
<p><font size=4>其主要核心流程分为编译和执行两步。首先需要将 JavaScript 代码转换为低级中间代码或者机器能够理解的机器代码，然后再执行转换后的代码并输出执行结果。</font></p>
<img src="https://static001.geekbang.org/resource/image/b7/bf/b77593de2fc7754d146e1218c45ef2bf.jpg"  height= "10" width="800" />

<p><font size=4>你可以把 V8 看成是一个虚构出来的计算机，也称为虚拟机，虚拟机通过模拟实际计算机的各种功能来实现代码的执行，如模拟实际计算机的 CPU、堆栈、寄存器等，虚拟机还具有它自己的一套指令系统。</font></p>
<p><font size=4>所以对于 JavaScript 代码来说，V8 就是它的整个世界，当 V8 执行 JavaScript 代码时，你并不需要担心现实中不同操作系统的差异，也不需要担心不同体系结构计算机的差异，你只需要按照虚拟机的规范写好代码就可以了。</font></p>
<p><font size=4>既然 V8 是虚构出来的计算机，用来编译和执行 JavaScript 代码，那么接下来我们就看看，为什么计算机需要对 JavaScript 这样的高级语言进行编译，以及编译完成后又是如何执行的。</font></p>
<h2 id="高级代码为什么需要先编译再执行？"><a href="#高级代码为什么需要先编译再执行？" class="headerlink" title="高级代码为什么需要先编译再执行？"></a>高级代码为什么需要先编译再执行？</h2><p><font size=4>我们先从 CPU 是怎么执行机器代码讲起，你可以把 CPU 看成是一个非常小的运算机器，我们可以通过二进制的指令和 CPU 进行沟通，比如我们给 CPU 发出“1000100111011000”的二进制指令，这条指令的意思是将一个寄存器中的数据移动到另外一个寄存器中，当处理器执行到这条指令的时候，便会按照指令的意思去实现相关的操作。</font></p>
<p><font size=4>为了能够完成复杂的任务，工程师们为 CPU 提供了一大堆指令，来实现各种功能，我们就把这一大堆指令称为<strong>指令集</strong>（Instructions），也就是<strong>机器语言</strong>。</font></p>
<p><font size=4>注意，CPU 只能识别二进制的指令，但是对程序员来说，二进制代码难以阅读和记忆，于是我们又将二进制指令集转换为人类可以识别和记忆的符号，这就是<strong>汇编指令集</strong>，你可以参考下面的代码：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1000100111011000 机器指令mov ax,bx 汇编指令</span><br><span class="line">mov ax,bx 汇编指令</span><br></pre></td></tr></table></figure>

<p><font size=4>那么你可能会问，CPU 能直接识别汇编语言吗？</font></p>
<p><font size=4>答案是“不能”，所以如果你使用汇编编写了一段程序，你还需要一个汇编编译器，其作用是将汇编代码编程成机器代码，具体流程你可以参考下图：</font><br><img src="https://static001.geekbang.org/resource/image/6b/1f/6bb6d19ec37ea1a7d2cab2a25ea62b1f.jpg" alt="avatar"></p>
<p><font size=4>虽然汇编语言对机器语言做了一层抽象，减少了程序员理解机器语言的复杂度，但是汇编语言依然是复杂且繁琐的，即便你写一个非常简单的功能，也需要实现大量的汇编代码，这主要表现在以下两点。</font></p>
<p><font size=4>首先，<strong>不同的 CPU 有着不同的指令集</strong>，如果要使用机器语言或者汇编语言来实现一个功能，那么你需要为每种架构的 CPU 编写特定的汇编代码，这会带来巨大的、枯燥繁琐的操作，你可以参看下图:</font><br><img src="https://static001.geekbang.org/resource/image/75/70/75f4f88099f82bec62def94541189b70.jpg" alt="avatar"></p>
<p><font size=4>其次，<strong>在编写汇编代码时，我们还需要了解和处理器架构相关的硬件知识</strong>，比如你需要使用寄存器、内存、操作 CPU 等。大部分程序员在编写应用的时候，只想专心处理业务逻辑，并不想要过多地理会这些处理器架构相关的细节。</font></p>
<p><font size=4>因此我们需要一种屏蔽了计算机架构细节的语言，能适应多种不同 CPU 架构的语言，能专心处理业务逻辑的语言，诸如 C、C++、Java、C#、Python、JavaScript 等，这些“高级语言”就应运而生了。</font></p>
<p><font size=4>和汇编语言一样，处理器也不能直接识别由高级语言所编写的代码，那怎么办呢？通常，要有两种方式来执行这些代码。</font></p>
<p><font size=4>第一种是解释执行，需要先将输入的源代码通过解析器编译成中间代码，之后直接使用解释器解释执行中间代码，然后直接输出结果。具体流程如下图所示：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/33/5e/330ad69589d898f6609dfc083bfbe95e.jpg" alt="avatar"></p>
<p><font size=4>第二种是编译执行。采用这种方式时，也需要先将源代码转换为中间代码，然后我们的编译器再将中间代码编译成机器代码。通常编译成的机器代码是以二进制文件形式存储的，需要执行这段程序的时候直接执行二进制文件就可以了。还可以使用虚拟机将编译后的机器代码保存在内存中，然后直接执行内存中的二进制代码。</font></p>
<p><img src="https://static001.geekbang.org/resource/image/1f/d3/1f933e42e81dacc8f4f2d86e01a914d3.jpg" alt="avatar"></p>
<p><font size=4>以上就是计算机执行高级语言的两种基本的方式：解释执行和编译执行。但是针对不同的高级语言，这个实现方式还是有很大差异的，比如要执行 C 语言编写的代码，你需要将其编译为二进制代码的文件，然后再直接执行二进制代码。而对于像 Java 语言、JavaScript 语言等，则需要不同虚拟机，模拟计算机的这个编译执行流程。执行 Java 语言，需要经过 Java 虚拟机的转换，执行 JavaScript 需要经过 JavaScript 虚拟机的转换。</font></p>
<h2 id="V8-是怎么执行-JavaScript-代码的？"><a href="#V8-是怎么执行-JavaScript-代码的？" class="headerlink" title="V8 是怎么执行 JavaScript 代码的？"></a>V8 是怎么执行 JavaScript 代码的？</h2><p><font size=4>那么，V8 作为 JavaScript 的虚拟机的一种，它到底是怎么执行 JavaScript 代码的呢？是解释执行，还是编译执行呢？</font></p>
<p><font size=4>实际上，V8 并没有采用某种单一的技术，而是混合编译执行和解释执行这两种手段，我们把这种混合使用编译器和解释器的技术称为 JIT（Just In Time）技术。</font></p>
<p><font size=4>这是一种权衡策略，因为这两种方法都各自有各自的优缺点，解释执行的启动速度快，但是执行时的速度慢，而编译执行的启动速度慢，但是执行时的速度快。你可以参考下面完整的 V8 执行 JavaScript 的流程图：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/8a/54/8a34ae8c1a7a0f87e19b1384a025e354.jpg" alt="avatar"></p>
<p><font size=4>我们先看上图中的最左边的部分，在 V8 启动执行 JavaScript 之前，它还需要准备执行 JavaScript 时所需要的一些基础环境，这些基础环境包括了“堆空间”“栈空间”“全局执行上下文”“全局作用域”“消息循环系统”“内置函数”等，这些内容都是在执行 JavaScript 过程中需要使用到的，比如：</font></p>
<ul>
<li><font size=4>JavaScript 全局执行上下文就包含了执行过程中的全局信息，比如一些内置函数，全局变量等信息；</font></li>
<li><font size=4>全局作用域包含了一些全局变量，在执行过程中的数据都需要存放在内存中</font></li>
<li><font size=4>而 V8 是采用了经典的堆和栈的内存管理模式，所以 V8 还需要初始化内存中的堆和栈结构；</font></li>
<li><font size=4>另外，想要我们的 V8 系统活起来，还需要初始化消息循环系统，消息循环系统包含了消息驱动器和消息队列，它如同 V8 的心脏，不断接受消息并决策如何处理消息</font></li>
</ul>
<p><font size=4>基础环境准备好之后，接下来就可以向 V8 提交要执行的 JavaScript 代码了。</font></p>
<p><font size=4>首先 V8 会接收到要执行的 JavaScript 源代码，不过这对 V8 来说只是一堆字符串，V8 并不能直接理解这段字符串的含义，它需要结构化这段字符串。<strong>结构化</strong>，是指信息经过分析后可分解成多个互相关联的组成部分，各组成部分间有明确的层次结构，方便使用和维护，并有一定的操作规范。</font></p>
<p><font size=4>V8 源代码的结构化之后，就生成了抽象语法树 (AST)，我们称为 AST，AST 是便于 V8 理解的结构。</font></p>
<p><font size=4>有了 AST 和作用域之后，接下来就可以生成字节码了，字节码是介于 AST 和机器代码的中间代码。但是与特定类型的机器代码无关，解释器可以直接解释执行字节码，或者通过编译器将其编译为二进制的机器代码再执行。</font></p>
<p><font size=4>好了，生成了字节码之后，解释器就登场了，它会按照顺序解释执行字节码，并输出执行结果。</font></p>
<p><font size=4>相信你注意到了，我们在解释器附近画了个监控机器人，这是一个监控解释器执行状态的模块，在解释执行字节码的过程中，如果发现了某一段代码会被重复多次执行，那么监控机器人就会将这段代码标记为热点代码。</font></p>
<p><font size=4>当某段代码被标记为热点代码后，V8 就会将这段字节码丢给优化编译器，优化编译器会在后台将字节码编译为二进制代码，然后再对编译后的二进制代码执行优化操作，优化后的二进制机器代码的执行效率会得到大幅提升。如果下面再执行到这段代码时，那么 V8 会优先选择优化之后的二进制代码，这样代码的执行速度就会大幅提升。</font></p>
<p><font size=4>不过，和静态语言不同的是，JavaScript 是一种非常灵活的动态语言，对象的结构和属性是可以在运行时任意修改的，而经过优化编译器优化过的代码只能针对某种固定的结构，一旦在执行过程中，对象的结构被动态修改了，那么优化之后的代码势必会变成无效的代码，这时候优化编译器就需要执行反优化操作，经过反优化的代码，下次执行时就会回退到解释器解释执行。</font></p>
<h2 id="跟踪一段实际代码的执行流程"><a href="#跟踪一段实际代码的执行流程" class="headerlink" title="跟踪一段实际代码的执行流程"></a>跟踪一段实际代码的执行流程</h2><p><font size=4>我们以一段最简单的 JavaScript 代码为例，如果将这段非常简单的代码提交给 V8 引擎，V8 在处理过程中，中间所产生的结果是怎样的呢？下面我们就一步一步详细“追踪”下。</font></p>
<p><font size=4>代码如下所示：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var test &#x3D; &#39;123&#39;</span><br></pre></td></tr></table></figure>

<p><font size=4>我们知道，首先这段代码会被解析器结构化成 AST，下面我们就来看看第一阶段生成的 AST 是什么样子的？</font></p>
<p><font size=4>要查看 V8 中间生成的一些结构，可以使用 V8 提供的调试工具 D8 来查看，你可以将上面那段代码保存到 test.js 的文件中，然后执行下面命令：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d8 --print-ast test.js</span><br></pre></td></tr></table></figure>

<p><font size=4>执行这段命令之后，D8 会打印出如下内容：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">--- AST ---</span><br><span class="line">FUNC at 0</span><br><span class="line">  KIND 0</span><br><span class="line">  LITERAL ID 0</span><br><span class="line">  SUSPEND COUNT 0</span><br><span class="line">  NAME &quot;&quot;</span><br><span class="line">  INFERRED NAME &quot;&quot;</span><br><span class="line">  DECLS</span><br><span class="line">    VARIABLE (0x7ff0e3022298) (mode &#x3D; VAR, assigned &#x3D; true) &quot;test&quot;</span><br><span class="line">  BLOCK NOCOMPLETIONS at -1</span><br><span class="line">    EXPRESSION STATEMENT at 11</span><br><span class="line">      INIT at 11</span><br><span class="line">        VAR PROXY unallocated (0x7ff0e3022298) (mode &#x3D; VAR, assigned &#x3D; true) &quot;test&quot;</span><br><span class="line">        LITERAL &quot;GeekTime&quot;</span><br></pre></td></tr></table></figure>

<p><font size=4>上面这个结构就是 AST，它就是 JS 源代码的结构化表述，AST 是个树状结构，直观地理解，你可以将其转换为一个图形树，如下图所示：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/57/87/57018772d9a93d367c07ce51b91e1f87.jpg" alt="avatar"></p>
<p><font size=4>从图中可以看出，AST 和代码结构也是一一对应关系，并且后续所有的操作都会直接或者间接基于它。</font></p>
<p><font size=4>上面我们还提到了，在生成 AST 的同时，还会生成作用域，同样我们使用 D8 来看看它生成的作用域是什么样子，你可以使用下面的命令来查看作用域：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d8 --print-scopes test.js</span><br></pre></td></tr></table></figure>

<p><font size=4>执行这段命令之后，D8 会打印出如下内容：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Global scope:</span><br><span class="line">global &#123;</span><br><span class="line">  &#x2F;&#x2F; (0x7fd974022048) (0, 24)</span><br><span class="line">  &#x2F;&#x2F; will be compiled</span><br><span class="line">  &#x2F;&#x2F; 1 stack slots</span><br><span class="line">  &#x2F;&#x2F; temporary vars:</span><br><span class="line">  TEMPORARY .result; &#x2F;&#x2F; (0x7fd9740223c8) local[0]</span><br><span class="line">  &#x2F;&#x2F; local vars:</span><br><span class="line">    VAR test &#x2F;&#x2F; (0x7fd974022298)&#125;</span><br></pre></td></tr></table></figure>

<p><font size=4>上面这行代码生成了一个全局作用域，我们可以看到 test 变量被添加进了这个全局作用域中。</font></p>
<p><font size=4>生成了 AST 和作用域之后，就可以使用解释器生成字节码了，同样你可以使用 D8 来打印生成后的字节码，打印的命令如下所示：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d8 --print-bytecode test.js</span><br></pre></td></tr></table></figure>

<p><font size=4>生成字节码之后，解释器会解释执行这段字节码，如果重复执行了某段代码，监控器就会将其标记为热点代码，并提交给编译器优化执行，如果你想要查看那些代码被优化了，可以使用下面的命令：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d8 --trace-opt test.js</span><br></pre></td></tr></table></figure>

<p><font size=4>如果要查看那些代码被反优化了，可以使用如下命令行来查看：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pt --trace-deopt test.js</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><font size=4>V8 是由 Google 开发的开源 JavaScript 引擎，也被称为虚拟机，模拟实际计算机各种功能来实现代码的编译和执行。那么，要想搞清楚 V8 内部的工作流程和原理，我们可以从分析计算机对语言的编译和执行过程入手。</font></p>
<p><font size=4>因为计算机只能识别二进制指令，所以要让计算机执行一段高级语言通常有两种手段，第一种是将高级代码转换为二进制代码，再让计算机去执行；另外一种方式是在计算机安装一个解释器，并由解释器来解释执行。</font></p>
<p><font size=4>解释执行和编译执行都有各自的优缺点，解释执行启动速度快，但是执行时速度慢，而编译执行启动速度慢，但是执行速度快。为了充分地利用解释执行和编译执行的优点，规避其缺点，V8 采用了一种权衡策略，在启动过程中采用了解释执行的策略，但是如果某段代码的执行频率超过一个值，那么 V8 就会采用优化编译器将其编译成执行效率更加高效的机器代码。</font></p>
<p><font size=4>理解了这一点，我们就可以来深入分析 V8 执行一段 JavaScript 代码所经历的主要流程了，这包括了：</font></p>
<ul>
<li><font size=4>初始化基础环境；</font></li>
<li><font size=4>解析源码生成 AST 和作用域；</font></li>
<li><font size=4>依据 AST 和作用域生成字节码；</font></li>
<li><font size=4>解释执行字节码；</font></li>
<li><font size=4>监听热点代码；</font></li>
<li><font size=4>优化热点代码为二进制的机器代码；</font></li>
<li><font size=4>反优化生成的二进制机器代码。</font></li>
</ul>
<p><font size=4>这里你需要注意的是，JavaScript 是一门动态语言，在运行过程中，某些被优化的结构可能会被 V8 动态修改了，这会导致之前被优化的代码失效，如果某块优化之后的代码失效了，那么编译器需要执行反优化操作。</font></p>
<h1 id="V8是怎样提升对象属性访问速度的？"><a href="#V8是怎样提升对象属性访问速度的？" class="headerlink" title="V8是怎样提升对象属性访问速度的？"></a>V8是怎样提升对象属性访问速度的？</h1><p><font size=4>JavaScript 中的对象是由一组组属性和值的集合，从 JavaScript 语言的角度来看，JavaScript 对象像一个字典，字符串作为键名，任意对象可以作为键值，可以通过键名读写键值。</font></p>
<p><font size=3.5>然而在 V8 实现对象存储时，并没有完全采用字典的存储方式，这主要是出于性能的考量。因为字典是非线性的数据结构，查询效率会低于线性的数据结构，V8 为了提升存储和查找效率，采用了一套复杂的存储策略。</font></p>
<p><img src="https://static001.geekbang.org/resource/image/c9/ef/c970cdc7b89bfe0a12e560fe94fcdfef.jpg" alt="avatar"></p>
<h2 id="常规属性-properties-和排序属性-element"><a href="#常规属性-properties-和排序属性-element" class="headerlink" title="常规属性 (properties) 和排序属性 (element)"></a>常规属性 (properties) 和排序属性 (element)</h2><p>在开始之前，我们先来了解什么是对象中的<strong>常规属性</strong>和<strong>排序属性</strong>，你可以先参考下面这样一段代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Foo() &#123; </span><br><span class="line">  this[100] &#x3D; &#39;test-100&#39;</span><br><span class="line">  this[1] &#x3D; &#39;test-1&#39;</span><br><span class="line">  this[&quot;B&quot;] &#x3D; &#39;bar-B&#39;</span><br><span class="line">  this[50] &#x3D; &#39;test-50&#39;</span><br><span class="line">  this[9] &#x3D; &#39;test-9&#39;</span><br><span class="line">  this[8] &#x3D; &#39;test-8&#39;</span><br><span class="line">  this[3] &#x3D; &#39;test-3&#39;</span><br><span class="line">  this[5] &#x3D; &#39;test-5&#39;</span><br><span class="line">  this[&quot;A&quot;] &#x3D; &#39;bar-A&#39;</span><br><span class="line">  this[&quot;C&quot;] &#x3D; &#39;bar-C&#39;</span><br><span class="line">&#125;</span><br><span class="line">var bar &#x3D; new Foo()</span><br><span class="line">    </span><br><span class="line">for(key in bar)&#123;</span><br><span class="line">  console.log(&#96;index:$&#123;key&#125; value:$&#123;bar[key]&#125;&#96;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在上面这段代码中，我们利用构造函数 Foo 创建了一个 bar 对象，在构造函数中，我们给 bar 对象设置了很多属性，包括了数字属性和字符串属性，然后我们枚举出来了 bar 对象中所有的属性，并将其一一打印出来，下面就是执行这段代码所打印出来的结果：</p>
<p>观察这段打印出来的数据，我们发现打印出来的属性顺序并不是我们设置的顺序，我们设置属性的时候是乱序设置的，比如开始先设置 100，然后又设置了 1，但是输出的内容却非常规律，总的来说体现在以下两点：</p>
<ul>
<li>设置的数字属性被最先打印出来了，并且是按照数字大小的顺序打印的；</li>
<li>设置的字符串属性依然是按照之前的设置顺序打印的，比如我们是按照 B、A、C 的顺序设置的，打印出来依然是这个顺序。</li>
</ul>
<p>之所以出现这样的结果，是因为在 ECMAScript 规范中定义了数字属性应该按照<strong>索引值大小升序排列</strong>，字符串属性根据<strong>创建时的顺序升序排列</strong>。</p>
<p>在这里我们把对象中的数字属性称为<strong>排序属性</strong>，在 V8 中被称为 <strong>elements</strong>，字符串属性就被称为<strong>常规属性</strong>，在 V8 中被称为 <strong>properties</strong></p>
<p>在 V8 内部，为了有效地提升存储和访问这两种属性的性能，分别使用了<strong>两个线性数据结构</strong>来分别保存排序属性和常规属性，具体结构如下图所示</p>
<p><img src="https://static001.geekbang.org/resource/image/af/75/af2654db3d3a2e0b9a9eaa25e862cc75.jpg" alt="avatar"></p>
<p>通过上图我们可以发现，bar 对象包含了两个隐藏属性：elements 属性和 properties 属性，elements 属性指向了 elements 对象，在 elements 对象中，会按照顺序存放排序属性，properties 属性则指向了 properties 对象，在 properties 对象中，会按照创建时的顺序保存了常规属性。</p>
<p>分解成这两种线性数据结构之后，如果执行索引操作，那么 V8 会先从 elements 属性中按照顺序读取所有的元素，然后再在 properties 属性中读取所有的元素，这样就完成一次索引操作。</p>
<h2 id="快属性和慢属性"><a href="#快属性和慢属性" class="headerlink" title="快属性和慢属性"></a>快属性和慢属性</h2><p>将不同的属性分别保存到 elements 属性和 properties 属性中，无疑简化了程序的复杂度，但是在查找元素时，却多了一步操作，比如执行 bar.B这个语句来查找 B 的属性值，那么在 V8 会先查找出 properties 属性所指向的对象 properties，然后再在 properties 对象中查找 B 属性，这种方式在查找过程中增加了一步操作，因此会影响到元素的查找效率</p>
<p>基于这个原因，V8 采取了一个权衡的策略以加快查找属性的效率，这个策略是将部分常规属性直接存储到对象本身，我们把这称为<strong>对象内属性 (in-object properties)</strong>。对象在内存中的展现形式你可以参看下图：</p>
<p><img src="https://static001.geekbang.org/resource/image/f1/3e/f12b4c6f6e631ce51d5b4f288dbfb13e.jpg" alt="avatar"></p>
<p>采用对象内属性之后，常规属性就被保存到 bar 对象本身了，这样当再次使用bar.B来查找 B 的属性值时，V8 就可以直接从 bar 对象本身去获取该值就可以了，这种方式减少查找属性值的步骤，增加了查找效率。</p>
<p>不过对象内属性的数量是固定的，默认是 10 个，如果添加的属性超出了对象分配的空间，则它们将被保存在常规属性存储中。虽然属性存储多了一层间接层，但可以自由地扩容。</p>
<p>通常，我们将保存在线性数据结构中的属性称之为“快属性”，因为线性数据结构中只需要通过索引即可以访问到属性，虽然访问线性结构的速度快，但是如果从线性结构中添加或者删除大量的属性时，则执行效率会非常低，这主要因为会产生大量时间和内存开销。</p>
<p>因此，如果一个对象的属性过多时，V8 就会采取另外一种存储策略，那就是“慢属性”策略，但慢属性的对象内部会有独立的非线性数据结构 (词典) 作为属性存储容器。所有的属性元信息不再是线性存储的，而是直接保存在属性字典中。</p>
<p><img src="https://static001.geekbang.org/resource/image/e8/17/e8ce990dce53295a414ce79e38149917.jpg" alt="avatar"></p>
<p>.markdown-cell .ace_editor {<br>  background-color: #FFFFFF;<br>  color: #333;<br>  font-size: 17px;  /* change the font size you want */<br>  line-height: 1.5;<br>  font-family: “monaco”;<br>}</p>
]]></content>
  </entry>
  <entry>
    <title>React 源码解析</title>
    <url>/2020/05/24/React-%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<p>RequestWork内容剖析:<br>1、addRootToSchedule(root: FiberRoot, expirationTime: ExpirationTime)<br>    若nextScheduledRoot为null, 表示任务没有进入调度</p>
]]></content>
  </entry>
  <entry>
    <title>堆和栈：函数调用是如何影响到内存布局的?</title>
    <url>/2020/07/07/%E5%A0%86%E5%92%8C%E6%A0%88%EF%BC%9A%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%98%AF%E5%A6%82%E4%BD%95%E5%BD%B1%E5%93%8D%E5%88%B0%E5%86%85%E5%AD%98%E5%B8%83%E5%B1%80%E7%9A%84/</url>
    <content><![CDATA[<p><img src="https://static001.geekbang.org/resource/image/67/15/67e0027f9a35eac8170b758f420ff815.jpeg" alt="avatar"></p>
<p><font size=4>相信你在使用 JavaScript 的过程中，经常会遇到栈溢出的错误，比如执行下面这样一段代码: </font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">function foo() &#123;</span><br><span class="line"> foo() &#x2F;&#x2F; 是否存在堆栈溢出错误?</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><font size=4>V8 就会报告栈溢出的错误，为了解决栈溢出的问题，我们可以在 foo 函数内部使用 setTimeout 来触发 foo 函数的调用，改造之后的程序就可以正确执行。</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">  setTimeout(foo, 0) &#x2F;&#x2F; 是否存在堆栈溢出错误?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=4>如果使用 Promise 来代替 setTimeout，在 Promise 的 then 方法中调用 foo 函数，改造的代码如下：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function foo() &#123;</span><br><span class="line">    return Promise.resolve().then(foo)</span><br><span class="line">&#125;</span><br><span class="line">foo()</span><br></pre></td></tr></table></figure>

<p><font size=4>在浏览器中执行这段代码，并没有报告栈溢出的错误，但是你会发现，执行这段代码会让整个页面卡住了。</font></p>
<p><font size=4>为什么这三段代码，第一段造成栈溢出的错误，第二段能够正确执行，而第三段没有栈溢出的错误，却会造成页面的卡死呢？</font></p>
<p><font size=4>其主要原因是这三段代码的底层执行逻辑是完全不同的：</font></p>
<ul>
<li><font size=4>第一段代码是在同一个任务中重复调用嵌套的 foo 函数；</font></li>
<li><font size=4>第二段代码是使用 setTimeout 让 foo 函数在不同的任务中执行；</font></li>
<li><font size=4>第三段代码是在同一个任务中执行 foo 函数，但是却不是嵌套执行。</font></li>
</ul>
<p><font size=4>这是因为，V8 执行这三种不同代码时，它们的内存布局是不同的，而不同的内存布局又会影响到代码的执行逻辑，因此我们需要了解 JavaScript 执行时的内存布局。</font></p>
<p><font size=4>下图是本文的主要内容在编译流水线中的位置，因为解释执行和直接执行二进制代码都使用了堆和栈，虽然它们在执行细节上存在着一定的差异，但是整体的执行架构是类似的。</font><br><img src="https://static001.geekbang.org/resource/image/d5/09/d540183ab23341f568b992881edaa709.jpg" alt="avatar"></p>
<h2 id="为什么使用栈结构来管理函数调用？"><a href="#为什么使用栈结构来管理函数调用？" class="headerlink" title="为什么使用栈结构来管理函数调用？"></a>为什么使用栈结构来管理函数调用？</h2><p><font size=4>我们知道，大部分高级语言都不约而同地采用栈这种结构来管理函数调用，为什么呢？这与函数的特性有关。通常函数有两个主要的特性：</font></p>
<ol>
<li>第一个特点是函数<strong>可以被调用</strong>，你可以在一个函数中调用另外一个函数，当函数调用发生时，执行代码的控制权将从父函数转移到子函数，子函数执行结束之后，又会将代码执行控制权返还给父函数；</li>
<li>第二个特点是函数<strong>具有作用域机制</strong>，所谓作用域机制，是指函数在执行的时候可以将定义在函数内部的变量和外部环境隔离，在函数内部定义的变量我们也称为临时变量，临时变量只能在该函数中被访问，外部函数通常无权访问，当函数执行结束之后，存放在内存中的临时变量也随之被销毁.</li>
</ol>
<p><font size=4>我们可以看下面这段 C 代码：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int getZ()</span><br><span class="line">&#123;</span><br><span class="line">    return 4;</span><br><span class="line">&#125;</span><br><span class="line">int add(int x, int y)</span><br><span class="line">&#123;</span><br><span class="line">    int z &#x3D; getZ();</span><br><span class="line">    return x + y + z;</span><br><span class="line">&#125;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x &#x3D; 5;</span><br><span class="line">    int y &#x3D; 6;</span><br><span class="line">    int ret &#x3D; add(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=4>观察上面这段代码，我们发现其中包含了多层函数嵌套调用，其实这个过程很简单，执行流程是这样的：</font></p>
<ol>
<li>当 main 函数调用 add 函数时，需要将代码执行控制权交给 add 函数；</li>
<li>然后 add 函数又调用了 getZ 函数，于是又将代码控制权转交给 getZ 函数；</li>
<li>接下来 getZ 函数执行完成，需要将控制权返回给 add 函数；</li>
<li>同样当 add 函数执行结束之后，需要将控制权返还给 main 函数；</li>
<li>然后 main 函数继续向下执行。</li>
</ol>
<p><font size=4>具体的函数调用示意图如下：</font><br><img src="https://static001.geekbang.org/resource/image/c3/c7/c39b2edd6a8c209d0f579a4e5e0e49c7.jpg" alt="avatar"></p>
<p><font size=4>通过上述分析，我们可以得出，<strong>函数调用者的生命周期总是长于被调用者（后进），并且被调用者的生命周期总是先于调用者的生命周期结束 (先出)。</strong></font></p>
<p><font size=4>在执行上述流程时，各个函数的生命周期如下图所示：</font><br><img src="https://static001.geekbang.org/resource/image/a3/db/a3cfa1ad1d6eb6be321355c191b76fdb.jpg" alt="avatar"></p>
<p><font size=4>因为函数是有作用域机制的，作用域机制通常表现在函数执行时，会在内存中分配函数内部的变量、上下文等数据，在函数执行完成之后，这些内部数据会被销毁掉。<strong>所以站在函数资源分配和回收角度来看，被调用函数的资源分配总是晚于调用函数 (后进)，而函数资源的释放则总是先于调用函数 (先出)。</strong> 如下图所示：</font><br><img src="https://static001.geekbang.org/resource/image/f8/99/f8aab2c91e5f29c275317cbfc02a4e99.jpg" alt="avatar"></p>
<p><font size=4>通过观察函数的生命周期和函数的资源分配情况，我们发现，它们都符合后进先出 (LIFO) 的策略，而栈结构正好满足这种后进先出 (LIFO) 的需求，所以我们选择栈来管理函数调用关系是一种很自然的选择。</font></p>
<p><font size=4>关于栈，你可以结合这么一个贴切的例子来理解，一条单车道的单行线，一端被堵住了，而另一端入口处没有任何提示信息，堵住之后就只能后进去的车子先出来（后进先出），这时这个堵住的单行线就可以被看作是一个<strong>栈容器</strong>，车子开进单行线的操作叫做<strong>入栈</strong>，车子倒出去的操作叫做<strong>出栈</strong></font></p>
<p><font size=4>在车流量较大的场景中，就会发生反复地入栈、栈满、出栈、空栈和再次入栈，一直循环。你可以参看下图：</font><br><img src="https://static001.geekbang.org/resource/image/cb/fa/cb286b244c88a88a1fbd0a41f93265fa.jpg" alt="avatar"></p>
<h2 id="栈如何管理函数调用？"><a href="#栈如何管理函数调用？" class="headerlink" title="栈如何管理函数调用？"></a>栈如何管理函数调用？</h2><p><font size=4>了解了栈的特性之后，我们就来看看栈是如何管理函数调用的。</font></p>
<p><font size=4>首先我们来分析最简单的场景：当执行一个函数的时候，栈怎么变化？</font></p>
<p><font size=4>当一个函数被执行时，函数的参数、函数内部定义变量都会依次压入到栈中，我们结合实际的代码来分析下这个过程，你可以参考下图：</font><br><img src="https://static001.geekbang.org/resource/image/27/78/27f1a623219737f376deddfefb865478.jpg" alt="avatar"></p>
<p><font size=4>上图展示的是一段简单的 C 代码的执行过程，可以看到：</font></p>
<ul>
<li><font size=4>当执行到函数的第一段代码的时候，变量 x 第一次被赋值，且值为 5，这时 5 会被压入到栈中</font></li>
<li><font size=4>然后，执行第二段代码，变量 y 第一次被赋值，且值为 6，这时 6 会被压入到栈中。</font></li>
<li><font size=4>接着，执行到第三段代码，注意这里变量 x 是第二次被赋值，且新的值为 100，那么这时并不是将 100 压入到栈中，而是替换之前压入栈的内容，也就是将栈中的 5 替换成 100。</font></li>
<li><font size=4>最后，执行第四段代码，这段代码是 int z = x + y，我们会先计算出来 x+y 的值，然后再将 x+y 的值赋值给 z，由于 z 是第一次被赋值，所以 z 的值也会被压入到栈中。</font></li>
</ul>
<p><font size=4>你会发现，<strong>函数在执行过程中，其内部的临时变量会按照执行顺序被压入到栈中。</strong></font></p>
<p><font size=4>了解了这一点，接下来我们就可以分析更加复杂一点的场景了：当一个函数调用另外一个函数时，栈的变化情况是怎样的？我们还是先看下面这段代码：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">int add(num1,num2)&#123;</span><br><span class="line">    int x &#x3D; num1;</span><br><span class="line">    int y &#x3D; num2;</span><br><span class="line">    int ret &#x3D; x + y;</span><br><span class="line">    return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x &#x3D; 5;</span><br><span class="line">    int y &#x3D; 6;</span><br><span class="line">    x &#x3D; 100;</span><br><span class="line">    int z &#x3D; add(x,y);</span><br><span class="line">    return z;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=4>观察上面这段代码，我们把上段代码中的 x+y 改造成了一个 add 函数，当执行到 int z = add(x,y) 时，当前栈的状态如下所示：</font><br><img src="https://static001.geekbang.org/resource/image/c3/ba/c39ca61afc6eaa78fe394e060028fdba.jpg" alt="avatar"></p>
<p><font size=4>接下来，就要调用 add 函数了，理想状态下，执行 add 函数的过程是下面这样的：</font><br><img src="https://static001.geekbang.org/resource/image/27/b1/27407a5f9089c4a8b09c0d2b775b50b1.jpg" alt="avatar"></p>
<p><font size=4>当执行到 add 函数时，会先把参数 num1 和 num2 压栈，接着我们再把变量 x、y、ret 的值依次压栈，不过执行这里，会遇到一个问题，那就是当 add 函数执行完成之后，需要将执行代码的控制权转交给 main 函数，这意味着需要将栈的状态恢复到 main 函数上次执行时的状态，我们把这个过程叫<strong>恢复现场</strong>。那么应该怎么恢复 main 函数的执行现场呢？</font></p>
<p><font size=4>其实方法很简单，只要在寄存器中保存一个永远指向当前栈顶的指针，栈顶指针的作用就是告诉你应该往哪个位置添加新元素，这个指针通常存放在 esp 寄存器中。如果你想往栈中添加一个元素，那么你需要先根据 esp 寄存器找到当前栈顶的位置，然后在栈顶上方添加新元素，新元素添加之后，还需要将新元素的地址更新到 esp 寄存器中</font></p>
<p><font size=4>有了栈顶指针，就很容易恢复 main 函数的执行现场了，当 add 函数执行结束时，只需要将栈顶指针向下移动就可以了，具体你可以参看下图：</font><br><img src="https://static001.geekbang.org/resource/image/68/bd/68b9d297cc48864ad49c1915766fa6bd.jpg" alt="avatar"></p>
<p><img src="https://static001.geekbang.org/resource/image/89/d2/89180f0674a92df96ce6f25813020ed2.jpg" alt="avatar"></p>
<p><font size=4>观察上图，将 esp 的指针向下移动到之前 main 函数执行时的地方就可以，不过新的问题又来了，CPU 是怎么知道要移动到这个地址呢？</font></p>
<p><font size=4>CPU 的解决方法是增加了另外一个 ebp 寄存器，用来保存当前函数的起始位置，我们把一个函数的起始位置也称为栈帧指针，ebp 寄存器中保存的就是当前函数的栈帧指针，如下图所示：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/94/91/94e1333f053d4dbbb41eb00aaf869a91.jpg" alt="avatar"></p>
<p><font size=4>在 main 函数调用 add 函数的时候，main 函数的栈顶指针就变成了 add 函数的栈帧指针，所以需要将 main 函数的栈顶指针保存到 ebp 中，当 add 函数执行结束之后，我需要销毁 add 函数的栈帧，并恢复 main 函数的栈帧，那么只需要取出 main 函数的栈顶指针写到 esp 中即可 (main 函数的栈顶指针是保存在 ebp 中的)，这就相当于将栈顶指针移动到 main 函数的区域。</font></p>
<p><font size=4>那么现在，我们可以执行 main 函数了吗？</font></p>
<p><font size=4>答案依然是“不能”，这主要是因为 main 函数也有它自己的栈帧指针，在执行 main 函数之前，我们还需恢复它的栈帧指针。</font></p>
<p><font size=4>通常的方法是在 main 函数中调用 add 函数时，CPU 会将当前 main 函数的栈帧指针保存在栈中，如下图所示：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/30/9c/30dc7c253b8d0ffb332cfb7a878ebe9c.jpg" alt="avatar"></p>
<p><font size=4>当函数调用结束之后，就需要恢复 main 函数的执行现场了，首先取出 ebp 中的指针，写入 esp 中，然后从栈中取出之前保留的 main 的栈帧地址，将其写入 ebp 中，到了这里 ebp 和 esp 就都恢复了，可以继续执行 main 函数了。</p>
<p><font size=4>以上我们详细分析了 C 函数的执行过程，在 JavaScript 中，函数的执行过程也是类似的，如果调用一个新函数，那么 V8 会为该函数创建栈帧，等函数执行结束之后，销毁该栈帧，而栈结构的容量是固定的，所有如果重复嵌套执行一个函数，那么就会导致栈会栈溢出。</font></p>
<h2 id="既然有了栈，为什么还要堆？"><a href="#既然有了栈，为什么还要堆？" class="headerlink" title="既然有了栈，为什么还要堆？"></a>既然有了栈，为什么还要堆？</h2><p><font size=4>好了，我们现在理解了栈是怎么管理函数调用的了，使用栈有非常多的优势：</font></p>
<ol>
<li>栈的结构和非常适合函数调用过程。</li>
<li>在栈上分配资源和销毁资源的速度非常快，这主要归结于栈空间是连续的，分配空间和销毁空间只需要移动下指针就可以了。</li>
</ol>
<p><font size=4>虽然操作速度非常快，但是栈也是有缺点的，其中最大的缺点也是它的优点所造成的，那就是栈是连续的，所以要想在内存中分配一块连续的大空间是非常难的，因此栈空间是有限的</font></p>
<p><font size=4>因为栈空间是有限的，这就导致我们在编写程序的时候，经常一不小心就会导致栈溢出，比如函数循环嵌套层次太多，或者在栈上分配的数据过大，都会导致栈溢出，基于栈不方便存放大的数据，因此我们使用了另外一种数据结构用来保存一些大数据，这就是堆。</font></p>
<p><font size=4>和栈空间不同，存放在堆空间中的数据是不要求连续存放的，从堆上分配内存块没有固定模式的，你可以在任何时候分配和释放它，为了更好地理解堆，我们看下面这段代码是怎么执行的：</font></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">struct Point</span><br><span class="line">&#123;</span><br><span class="line">    int x;</span><br><span class="line">    int y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    int x &#x3D; 5;</span><br><span class="line">    int y &#x3D; 6;</span><br><span class="line">    int *z &#x3D; new int;</span><br><span class="line">    *z &#x3D; 20;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Point p;</span><br><span class="line">    p.x &#x3D; 100;</span><br><span class="line">    p.y &#x3D; 200;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Point *pp &#x3D; new Point();</span><br><span class="line">    pp-&gt;y &#x3D; 400;</span><br><span class="line">    pp-&gt;x &#x3D; 500;</span><br><span class="line">    delete z;</span><br><span class="line">    delete pp;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=4>观察上面这段代码，你可以看到代码中有 new int、new Point 这种语句，当执行这些语句时，表示要在堆中分配一块数据，然后返回指针，通常返回的指针会被保存到栈中，下面我们来看看当 main 函数快执行结束时，堆和栈的状态，具体内容你可以参看下图：</font></p>
<p><img src="https://static001.geekbang.org/resource/image/13/55/139edffd0fb7e2b58f0e03c7d1240755.jpg" alt="avatar"></p>
<p><font size=4>观察上图，我们可以发现，当使用 new 时，我们会在堆中分配一块空间，在堆中分配空间之后，会返回分配后的地址，我们会把该地址保存在栈中，如上图中 p 和 pp 都是地址，它们保存在栈中，指向了在堆中分配的空间。</font></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><font size=4>因为现代语言都是基于函数的，每个函数在执行过程中，都有自己的生命周期和作用域，当函数执行结束时，其作用域也会被销毁，因此，我们会使用栈这种数据结构来管理函数的调用过程，我们也把管理函数调用过程的栈结构称之为<strong>调用栈</strong>。</font></p>
<p><font size=4>因为栈在内存中连续的数据结构，所以在通常情况下，栈都有最大容量限制，这也就意味着，函数的嵌套调用次数过多，就会超出栈的最大使用范围，从而导致栈溢出</font></p>
]]></content>
  </entry>
</search>
